name: Create or Update Catalog YAML and Import to Backstage

on:
  push:
    branches:
      - master

jobs:
  create-catalog-yaml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Find the JSON API file
      id: find-json
      run: |
        JSON_FILE=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep '\.json$' || true)
        if [ -z "$JSON_FILE" ]; then
          echo "No JSON file found in the commit."
          exit 1
        fi
        BASE_NAME=$(basename "$JSON_FILE" .json)
        echo "JSON_FILE=$JSON_FILE" >> $GITHUB_ENV
        echo "BASE_NAME=$BASE_NAME" >> $GITHUB_ENV

    - name: Parse JSON and create catalog-info.yaml
      run: |
        NAME=$(jq -r '.info.title' "${{ env.JSON_FILE }}")
        DESCRIPTION=$(jq -r '.info.description' "${{ env.JSON_FILE }}")
        echo "Description = $DESCRIPTION"
        # Extract tags JSON object from description
        TAGS_JSON=$(echo "$DESCRIPTION" | grep -oP '{"tags":\[\{[^}]+\}\]}' | jq '.tags[0]')
        echo "TAGS = $TAGS_JSON"
        # Extract owner and provided-by tags
        OWNER=$(echo "$TAGS_JSON" | jq -r '.owner')
        PROVIDED_BY=$(echo "$TAGS_JSON" | jq -r '.apiProvidedBy')

        # Check if NAME, DESCRIPTION, OWNER, or PROVIDED_BY is empty or null
        if [[ -z "$NAME" ]]; then
          echo "Failed to extract title from JSON."
          exit 1
        fi
        if [[ -z "$DESCRIPTION" ]]; then
          echo "Failed to extract description from JSON."
          exit 1
        fi
        if [[ -z "$OWNER" ]]; then
          echo "Failed to extract owner from JSON."
          exit 1
        fi
        if [[ -z "$PROVIDED_BY" ]]; then
          echo "Failed to extract provided-by from JSON."
          exit 1
        fi
        
        # Remove the tags JSON from description
        CLEAN_DESCRIPTION=$(echo "$DESCRIPTION" | sed 's/{"tags":\[\{[^}]+\}\]}//')

        cat <<EOF > "${{ env.BASE_NAME }}.yaml"
        apiVersion: backstage.io/v1alpha1
        kind: API
        metadata:
          name: $NAME
          description: $CLEAN_DESCRIPTION
          tags:
            - rest
            - openapi
          links:
            - url: "https://github.com/${{ github.repository }}"
              title: GitHub Repo 
              icon: github 
            - url: "https://github.com/${{ github.repository }}/blob/master/${{ env.JSON_FILE }}"
              title: API Spec 
              icon: code
        spec:
          type: openapi
          owner: $OWNER
          lifecycle: experimental
          apiConsumedBy: ["component:${PROVIDED_BY}"]
          definition:
            "\$text": "./${{ env.BASE_NAME }}.json"
        EOF
      env:
        JSON_FILE: ${{ env.JSON_FILE }}
        BASE_NAME: ${{ env.BASE_NAME }}
      
    - name: Commit changes
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add "${{ env.BASE_NAME }}.yaml"
        git commit -m "Automatically create/update ${{ env.BASE_NAME }}.yaml"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update /etc/hosts
      run: |
        echo "${{ secrets.FIXED_IP_ADDRESS }} k8smaster.local" | sudo tee -a /etc/hosts

    - name: Import catalog-info.yaml to Backstage
      run: |
        curl -k -d '{"type":"url","target":"https://github.com/${{ github.repository }}/blob/master/${{ env.BASE_NAME }}.yaml"}' \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer ${{ secrets.BACKSTAGE_API_TOKEN }}" \
             -X POST https://k8smaster.local/tibco/hub/api/catalog/locations
      env:
        BASE_NAME: ${{ env.BASE_NAME }}
